// Mocks generated by Mockito 5.4.4 from annotations
// in motosapp/test/src/features/maintenance/data/repositories/maintenance_type_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:motosapp/src/features/maintenance/domain/datasource/maintenance_type_datasource.dart'
    as _i3;
import 'package:motosapp/src/features/maintenance/domain/entities/maintenance_type_entity.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMaintenanceTypeEntity_0 extends _i1.SmartFake
    implements _i2.MaintenanceTypeEntity {
  _FakeMaintenanceTypeEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MaintenanceTypeDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMaintenanceTypeDataSource extends _i1.Mock
    implements _i3.MaintenanceTypeDataSource {
  MockMaintenanceTypeDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.MaintenanceTypeEntity>> getListMaintenanceType() =>
      (super.noSuchMethod(
        Invocation.method(
          #getListMaintenanceType,
          [],
        ),
        returnValue: _i4.Future<List<_i2.MaintenanceTypeEntity>>.value(
            <_i2.MaintenanceTypeEntity>[]),
      ) as _i4.Future<List<_i2.MaintenanceTypeEntity>>);

  @override
  _i4.Future<_i2.MaintenanceTypeEntity> getMaintenanceType(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMaintenanceType,
          [id],
        ),
        returnValue: _i4.Future<_i2.MaintenanceTypeEntity>.value(
            _FakeMaintenanceTypeEntity_0(
          this,
          Invocation.method(
            #getMaintenanceType,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.MaintenanceTypeEntity>);

  @override
  _i4.Future<void> saveMaintenanceType(
          _i2.MaintenanceTypeEntity? maintenanceTypeEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMaintenanceType,
          [maintenanceTypeEntity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMaintenanceType(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMaintenanceType,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
