// Mocks generated by Mockito 5.4.2 from annotations
// in motosapp/test/src/features/maintenance/domain/usecases/save_maintenance_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:motosapp/src/features/maintenance/domain/entities/maintenance_type_entity.dart'
    as _i6;
import 'package:motosapp/src/features/maintenance/domain/repositories/maintenance_type_repository.dart'
    as _i3;
import 'package:motosapp/src/shared/errors/failures.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MaintenanceTypeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMaintenanceTypeRepository extends _i1.Mock
    implements _i3.MaintenanceTypeRepository {
  MockMaintenanceTypeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.MaintenanceTypeEntity>>>
      getListMaintenanceType() => (super.noSuchMethod(
            Invocation.method(
              #getListMaintenanceType,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i6.MaintenanceTypeEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.MaintenanceTypeEntity>>(
              this,
              Invocation.method(
                #getListMaintenanceType,
                [],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, List<_i6.MaintenanceTypeEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.MaintenanceTypeEntity>>
      getMaintenanceType(String? id) => (super.noSuchMethod(
            Invocation.method(
              #getMaintenanceType,
              [id],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, _i6.MaintenanceTypeEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.MaintenanceTypeEntity>(
              this,
              Invocation.method(
                #getMaintenanceType,
                [id],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i6.MaintenanceTypeEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> saveMaintenanceType(
          _i6.MaintenanceTypeEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMaintenanceType,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #saveMaintenanceType,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteMaintenanceType(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMaintenanceType,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteMaintenanceType,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
